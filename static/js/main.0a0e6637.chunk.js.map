{"version":3,"sources":["components/common/Preloader/Preloader.module.css","components/context/taskContext.jsx","components/ListComponents/ListItem.jsx","assets/icons/loading.svg","components/common/Preloader/Preloader.jsx","components/List.jsx","components/Input.jsx","components/context/ContextProvider.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["module","exports","TaskContext","createContext","ListItem","task","useContext","checkTask","deleteTask","editTask","useState","edit","setEdit","text","newTask","setTask","className","Checkbox","checked","done","onChange","inputProps","onSubmit","e","preventDefault","trim","id","TextField","defaultValue","target","value","autoFocus","onBlur","onClick","Button","color","style","fontSize","padding","Preloader","props","isFetching","classes","loadingIcon","src","loadIcon","display","justifyContent","width","height","alt","List","tasks","length","map","Input","setText","addTask","submitTask","variant","label","border","marginLeft","type","url","process","ContextProvider","children","setTasks","fetchTodos","a","axios","response","data","Error","message","newID","Date","getTime","useEffect","Provider","App","Card","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a0e6637.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingIcon\":\"Preloader_loadingIcon__BbD47\",\"rotateOut\":\"Preloader_rotateOut__3PtdR\"};","import { createContext } from \"react\";\r\n\r\nconst TaskContext = createContext();\r\n\r\nexport default TaskContext;","import { useContext, useState } from \"react\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nimport TaskContext from \"../context/taskContext\";\r\n\r\nexport default function ListItem({ task }) {\r\n\r\n  const { checkTask, deleteTask, editTask } = useContext(TaskContext);\r\n  const [edit, setEdit] = useState(false);\r\n  const [newTask, setTask] = useState(task.text);\r\n\r\n  function editTaskSetter(e) {\r\n    e.preventDefault();\r\n    if (newTask.trim()) editTask(newTask, task.id);\r\n    setEdit(false);\r\n  }\r\n\r\n  return (\r\n    <li className=\"task\">\r\n      <div>\r\n        <span>\r\n          <Checkbox\r\n            checked={task.done}\r\n            onChange={() => checkTask(task)}\r\n            inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n          />\r\n        </span>\r\n        {edit ? (\r\n          <span>\r\n            <form onSubmit={editTaskSetter} className=\"textEditForm\">\r\n              <TextField\r\n                id=\"textEditForm\"\r\n                defaultValue={task.text}\r\n                onChange={(e) => setTask(e.target.value)}\r\n                autoFocus\r\n                onBlur={() => setEdit(false)}\r\n              />\r\n            </form>\r\n          </span>\r\n        ) : (\r\n          <span onClick={() => setEdit(true)}> {task.text} </span>\r\n        )}\r\n      </div>\r\n      <Button\r\n        color=\"secondary\"\r\n        className=\"deleteBtn\"\r\n        style={{ fontSize: \"2rem\", padding: 0 }}\r\n        onClick={() => deleteTask(task.id)}\r\n      >\r\n        &times;\r\n      </Button>\r\n    </li>\r\n  );\r\n}","export default __webpack_public_path__ + \"static/media/loading.0c0f9572.svg\";","import React from 'react';\r\nimport classes from './Preloader.module.css';\r\nimport loadIcon from '../../../assets/icons/loading.svg'\r\n\r\nconst Preloader = (props) => {\r\n    return (props.isFetching ? <div className={classes.loadingIcon}>\r\n        <img src={loadIcon} style={{ display: 'flex', justifyContent: 'center', width: '100px', height: '100px' }} alt='load icon'></img>\r\n    </div> : null)\r\n}\r\n\r\nexport default Preloader;","import ListItem from \"./ListComponents/ListItem\";\r\nimport { useContext } from \"react\";\r\nimport TaskContext from \"./context/taskContext\";\r\nimport Preloader from \"./common/Preloader/Preloader\";\r\n\r\nexport default function List() {\r\n  const { tasks } = useContext(TaskContext);\r\n  return (\r\n    <>\r\n      {tasks.length ? (\r\n        <ul className=\"taskList\">\r\n          {tasks.map((task) => (\r\n            <ListItem task={task} key={task.id} />\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <Preloader />\r\n      )\r\n      }\r\n    </>\r\n  );\r\n}\r\n","import React, { useContext, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core'\r\nimport TaskContext from './context/taskContext';\r\n\r\nfunction Input() {\r\n    const [text, setText] = useState(\"\");\r\n    const { addTask } = useContext(TaskContext);\r\n\r\n    function submitTask(e) {\r\n        e.preventDefault();\r\n        if (text.trim()) {\r\n            addTask(text);\r\n            setText(\"\");\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <form\r\n            style={{ width: \"100%\" }}\r\n            onSubmit={submitTask}\r\n            className=\"inputForm\"\r\n        >\r\n            <TextField\r\n                id=\"outlined-basic\"\r\n                variant=\"outlined\"\r\n                label=\"Task\"\r\n                className=\"inputText\"\r\n                value={text}\r\n                onChange={(e) => setText(e.target.value)}\r\n            />\r\n            <Button\r\n                variant=\"outlined\"\r\n                className=\"addBtn\"\r\n                style={{\r\n                    color: \"#00c600\",\r\n                    border: \"2px solid #00c600\",\r\n                    marginLeft: \"10px\",\r\n                }}\r\n                type=\"submit\"\r\n                onClick={submitTask}\r\n            >\r\n                ADD\r\n            </Button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Input;","import * as axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport TaskContext from \"./taskContext\";\r\n\r\n\r\nconst url = process.env.REACT_APP_DB_URL;\r\n\r\nexport default function ContextProvider({ children }) {\r\n    const [tasks, setTasks] = useState([]);\r\n\r\n    async function fetchTodos() {\r\n        try {\r\n            const response = await axios.get(url);\r\n            setTasks(response.data);\r\n        } catch (e) {\r\n            throw new Error(e.message);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchTodos();\r\n    }, []);\r\n\r\n    async function checkTask(task) {\r\n        try {\r\n            await axios.patch(`${url}/${task.id}`, { done: !task.done });\r\n            fetchTodos();\r\n        } catch (e) {\r\n            throw new Error(e.message);\r\n        }\r\n    }\r\n\r\n    async function deleteTask(id) {\r\n        try {\r\n            await axios.delete(`${url}/${id}`);\r\n            fetchTodos();\r\n        } catch (e) {\r\n            throw new Error(e.message);\r\n        }\r\n    }\r\n\r\n    async function addTask(text) {\r\n        // let newID = String(Date.now()).slice(3, 7);\r\n        let newID = new Date();\r\n        const task = { id: newID.getTime(), text, done: false };\r\n        try {\r\n            await axios.post(url, task);\r\n            fetchTodos();\r\n        } catch (e) {\r\n            throw new Error(e.message);\r\n        }\r\n    }\r\n\r\n    async function editTask(text, id) {\r\n        try {\r\n            await axios.patch(`${url}/${id}`, { text });\r\n            fetchTodos();\r\n        } catch (e) {\r\n            throw new Error(e.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <TaskContext.Provider\r\n            value={{ tasks, checkTask, deleteTask, addTask, editTask }}\r\n        >\r\n            {children}\r\n        </TaskContext.Provider>\r\n    );\r\n}\r\n\r\n","import React from 'react';\nimport Card from \"@material-ui/core/Card\";\nimport List from './components/List';\nimport Input from './components/Input';\nimport './index.css'\nimport ContextProvider from './components/context/ContextProvider';\n\n\nconst App = (props) => {\n\n  return (\n    <ContextProvider>\n      <div className='wrapper'>\n        <Card className='taskListWrapper'>\n          <Input />\n          <List />\n        </Card>\n      </div>\n    </ContextProvider>\n  )\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}